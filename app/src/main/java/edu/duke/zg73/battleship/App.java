/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.zg73.battleship;

import java.io.*;

public class App implements Serializable{


    final TextPlayer player1;
    final TextPlayer player2;

    public App(TextPlayer player1, TextPlayer player2) {
        this.player1 = player1;
        this.player2 = player2;

    }




    public static void main(String[] args) throws IOException {
        BufferedReader buffer_reader = new BufferedReader(new InputStreamReader(System.in));
        V2ShipFactory v2shipfactory = new V2ShipFactory();
        Board<Character> b1 = new BattleShipBoard<Character>(10, 10, 'X');
        Board<Character> b2 = new BattleShipBoard<Character>(10, 10, 'X');
        TextPlayer player1;
        TextPlayer player2;
        System.out.println("\nWelcome to Battleship!\nEnter AI if you want to play with AI\nEnter Hard AI if you want to play with Smart AI\nEnter two AI if you want to AI vs AI\nEnter No if you want to play with human");
        String userInput = buffer_reader.readLine();
        if (userInput != null && userInput.equals("AI")) {
            player1 = new TextPlayer("A", b1, buffer_reader, System.out, v2shipfactory);
            player2 = new TextPlayer("AI", b2, buffer_reader, System.out, v2shipfactory);
        } else if(userInput != null && userInput.equals("Hard AI")) {
            player1 = new TextPlayer("A", b1, buffer_reader, System.out, v2shipfactory);
            player2 = new TextPlayer("Hard AI", b2, buffer_reader, System.out, v2shipfactory);
        }else if(userInput != null && userInput.equals("two AI")) {
            player1 = new TextPlayer("AI", b1, buffer_reader, System.out, v2shipfactory);
            player2 = new TextPlayer("AI", b2, buffer_reader, System.out, v2shipfactory);
        }else{
            player1 = new TextPlayer("A", b1, buffer_reader, System.out, v2shipfactory);
            player2 = new TextPlayer("B", b2, buffer_reader, System.out, v2shipfactory);
        }

        App app = new App(player1, player2);
        app.doPlacementPhase();
        app.doAttackingPhase();
    }

    /**
     * do one placement on the board
     *
     * @throws IOException
     */
    public void doPlacementPhase() throws IOException {
        this.player1.doPlacementPhase();
        this.player2.doPlacementPhase();
    }

    /**
     * do one attacking phase
     * @throws IOException
     */

    public void doAttackingPhase() throws IOException {
        while(true){

            player1.playOneTurn(player2.theBoard, player2.view);
            if(player2.theBoard.is_lost()){
                player1.win_message();
                return;
            }
            player2.playOneTurn(player1.theBoard, player1.view);
            if(player1.theBoard.is_lost()){
                player2.win_message();
                return;
            }

        }






    }
}


